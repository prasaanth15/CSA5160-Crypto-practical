#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

void find_pos(char ch, int *r, int *c) {
    for (*r = 0; *r < SIZE; (*r)++) {
        for (*c = 0; *c < SIZE; (*c)++) {
            if (matrix[*r][*c] == ch) return;
        }
    }
}

void encrypt_pair(char a, char b) {
    int r1, c1, r2, c2;
    find_pos(a, &r1, &c1);
    find_pos(b, &r2, &c2);
    if (r1 == r2)
        printf("%c%c", matrix[r1][(c1 + 1) % SIZE], matrix[r2][(c2 + 1) % SIZE]);
    else if (c1 == c2)
        printf("%c%c", matrix[(r1 + 1) % SIZE][c1], matrix[(r2 + 1) % SIZE][c2]);
    else
        printf("%c%c", matrix[r1][c2], matrix[r2][c1]);
}

void prepare_text(const char *text, char *prepared) {
    int j = 0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            char ch = toupper(text[i]);
            if (ch == 'J') ch = 'I';
            if (j > 0 && prepared[j - 1] == ch) prepared[j++] = 'X';
            prepared[j++] = ch;
        }
    }
    if (j % 2 != 0) prepared[j++] = 'X';
    prepared[j] = '\0';
}

int main() {
    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    char prepared[100];
    prepare_text(plaintext, prepared);
    
    for (int i = 0; i < strlen(prepared); i += 2) {
        encrypt_pair(prepared[i], prepared[i + 1]);
    }
    printf("\n");
    
    return 0;
}


#output
UZTBDLZRWQNPZLGBETQALOZATBTQFKQLTHPODG
