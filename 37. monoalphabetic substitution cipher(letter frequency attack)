#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

double english_freq[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153,
    0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

void calculate_freq(const char *text, int len, double *freq) {
    int count[ALPHABET_SIZE] = {0};
    for (int i = 0; i < len; i++) {
        if (text[i] >= 'A' && text[i] <= 'Z') count[text[i] - 'A']++;
        else if (text[i] >= 'a' && text[i] <= 'z') count[text[i] - 'a']++;
    }
    for (int i = 0; i < ALPHABET_SIZE; i++) freq[i] = ((double)count[i] / len) * 100;
}

double chi_squared(const double *observed, const double *expected) {
    double chi_sq = 0.0;
    for (int i = 0; i < ALPHABET_SIZE; i++)
        chi_sq += ((observed[i] - expected[i]) * (observed[i] - expected[i])) / expected[i];
    return chi_sq;
}

void generate_plaintexts(const char *ciphertext, char possible_plaintexts[ALPHABET_SIZE][1000], int len) {
    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        for (int i = 0; i < len; i++) {
            if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z')
                possible_plaintexts[shift][i] = 'A' + (ciphertext[i] - 'A' + shift) % ALPHABET_SIZE;
            else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z')
                possible_plaintexts[shift][i] = 'a' + (ciphertext[i] - 'a' + shift) % ALPHABET_SIZE;
            else
                possible_plaintexts[shift][i] = ciphertext[i];
        }
        possible_plaintexts[shift][len] = '\0';
    }
}

void sort_plaintexts(char possible_plaintexts[ALPHABET_SIZE][1000], double chi_sq_values[ALPHABET_SIZE], int top_n) {
    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = i + 1; j < ALPHABET_SIZE; j++) {
            if (chi_sq_values[i] > chi_sq_values[j]) {
                double temp_val = chi_sq_values[i];
                chi_sq_values[i] = chi_sq_values[j];
                chi_sq_values[j] = temp_val;

                char temp_text[1000];
                strcpy(temp_text, possible_plaintexts[i]);
                strcpy(possible_plaintexts[i], possible_plaintexts[j]);
                strcpy(possible_plaintexts[j], temp_text);
            }
        }
    }
    for (int i = 0; i < top_n && i < ALPHABET_SIZE; i++) {
        printf("%d: %s (Chi-Squared: %.2f)\n", i + 1, possible_plaintexts[i], chi_sq_values[i]);
    }
}

int main() {
    char ciphertext[] = "Uifsf jt b tfdsfu nfttbhf";
    int len = strlen(ciphertext);

    char possible_plaintexts[ALPHABET_SIZE][1000];
    double chi_sq_values[ALPHABET_SIZE];

    generate_plaintexts(ciphertext, possible_plaintexts, len);

    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        double freq[ALPHABET_SIZE] = {0.0};
        calculate_freq(possible_plaintexts[shift], len, freq);
        chi_sq_values[shift] = chi_squared(freq, english_freq);
    }

    int top_n = 10;
    sort_plaintexts(possible_plaintexts, chi_sq_values, top_n);

    return 0;
}

#output
: There is a secret message (Chi-Squared: 68.67)
2: Pdana eo w oaynap iaoowca (Chi-Squared: 127.58)
3: Iwtgt xh p htrgti bthhpvt (Chi-Squared: 254.94)
4: Hvsfs wg o gsqfsh asggous (Chi-Squared: 397.16)
5: Uifsf jt b tfdsfu nfttbhf (Chi-Squared: 410.64)
6: Nbyly cm u mywlyn gymmuay (Chi-Squared: 411.94)
7: Drobo sc k combod wocckqo (Chi-Squared: 428.64)
8: Gurer vf n frperg zrffntr (Chi-Squared: 437.83)
9: Espcp td l dpncpe xpddlrp (Chi-Squared: 450.74)
10: Wkhuh lv d vhfuhw phvvdjh (Chi-Squared: 498.40)
