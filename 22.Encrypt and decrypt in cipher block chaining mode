#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Simple S-DES functions for illustration purposes (real S-DES functions are more complex)
void sdes_encrypt(uint8_t *block, uint8_t *key, uint8_t *ciphertext) {
    // A simple placeholder encryption function (not actual S-DES)
    for (int i = 0; i < 8; ++i) {
        ciphertext[i] = block[i] ^ key[i % 2];
    }
}

void sdes_decrypt(uint8_t *block, uint8_t *key, uint8_t *plaintext) {
    // A simple placeholder decryption function (not actual S-DES)
    for (int i = 0; i < 8; ++i) {
        plaintext[i] = block[i] ^ key[i % 2];
    }
}

// XOR operation
void xor_block(uint8_t *in1, uint8_t *in2, uint8_t *out, int size) {
    for (int i = 0; i < size; ++i) {
        out[i] = in1[i] ^ in2[i];
    }
}

// Encryption function in CBC mode
void cbc_encrypt(uint8_t *plaintext, uint8_t *key, uint8_t *iv, uint8_t *ciphertext, int size) {
    uint8_t block[8];
    uint8_t xor_block_result[8];
    
    for (int i = 0; i < size; i += 8) {
        xor_block(plaintext + i, iv, xor_block_result, 8);
        sdes_encrypt(xor_block_result, key, block);
        memcpy(iv, block, 8); // Update IV
        memcpy(ciphertext + i, block, 8);
    }
}

// Decryption function in CBC mode
void cbc_decrypt(uint8_t *ciphertext, uint8_t *key, uint8_t *iv, uint8_t *plaintext, int size) {
    uint8_t block[8];
    uint8_t xor_block_result[8];
    uint8_t prev_ciphertext[8];
    
    for (int i = 0; i < size; i += 8) {
        memcpy(prev_ciphertext, ciphertext + i, 8);
        sdes_decrypt(ciphertext + i, key, block);
        xor_block(block, iv, xor_block_result, 8);
        memcpy(iv, prev_ciphertext, 8); // Update IV
        memcpy(plaintext + i, xor_block_result, 8);
    }
}

int main() {
    uint8_t key[8] = {0x1F, 0xFD};  // Example key
    uint8_t iv[8] = {0xAA, 0xAA};   // Initialization Vector
    uint8_t plaintext[8] = {0x01, 0x23}; // Example plaintext
    uint8_t ciphertext[8];
    uint8_t decryptedtext[8];
    
    printf("Plaintext: ");
    for (int i = 0; i < 8; ++i) printf("%02X ", plaintext[i]);
    printf("\n");
    
    cbc_encrypt(plaintext, key, iv, ciphertext, 8);
    
    printf("Ciphertext: ");
    for (int i = 0; i < 8; ++i) printf("%02X ", ciphertext[i]);
    printf("\n");
    
    // Reset IV for decryption
    iv[0] = 0xAA; iv[1] = 0xAA;
    cbc_decrypt(ciphertext, key, iv, decryptedtext, 8);
    
    printf("Decryptedtext: ");
    for (int i = 0; i < 8; ++i) printf("%02X ", decryptedtext[i]);
    printf("\n");
    
    return 0;
}


#OUTPUT
Plaintext: 01 23 00 00 00 00 00 00
Ciphertext: B4 74 1F FD 1F FD 1F FD
Decryptedtext: 01 23 1F FD 1F FD 1F FD
