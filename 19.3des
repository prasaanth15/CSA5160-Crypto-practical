
#include <stdio.h>
#include <string.h>
#include <stdint.h>

#define BLOCK_SIZE 8

// Dummy DES encryption (replace with actual DES implementation)
void des_encrypt(const uint8_t input[BLOCK_SIZE], uint8_t output[BLOCK_SIZE], const uint8_t key[8]) {
    memcpy(output, input, BLOCK_SIZE);  // Placeholder (copy input to output)
}

// Triple DES encryption
void triple_des_encrypt(const uint8_t input[BLOCK_SIZE], uint8_t output[BLOCK_SIZE], const uint8_t key[24]) {
    uint8_t temp[BLOCK_SIZE];
    des_encrypt(input, temp, key);
    des_encrypt(temp, temp, key + 8);
    des_encrypt(temp, output, key + 16);
}

// CBC mode encryption
void cbc_encrypt(const uint8_t *plaintext, size_t len, uint8_t *ciphertext, const uint8_t key[24], const uint8_t iv[BLOCK_SIZE]) {
    uint8_t block[BLOCK_SIZE];
    uint8_t xor_block[BLOCK_SIZE];
    memcpy(xor_block, iv, BLOCK_SIZE);

    for (size_t i = 0; i < len; i += BLOCK_SIZE) {
        memset(block, 0, BLOCK_SIZE);
        size_t to_copy = (len - i < BLOCK_SIZE) ? len - i : BLOCK_SIZE;
        memcpy(block, plaintext + i, to_copy);
        for (size_t j = 0; j < BLOCK_SIZE; j++) {
            block[j] ^= xor_block[j];
        }
        triple_des_encrypt(block, ciphertext + i, key);
        memcpy(xor_block, ciphertext + i, BLOCK_SIZE);
    }
}

int main() {
    const uint8_t key[24] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
        0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xab
    };
    const uint8_t iv[BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    const uint8_t plaintext[] = "Hello!";
    size_t plaintext_len = strlen((const char *)plaintext);
    uint8_t ciphertext[BLOCK_SIZE * 2] = {0};  // Adjust size as needed

    cbc_encrypt(plaintext, plaintext_len, ciphertext, key, iv);

    printf("Ciphertext: ");
    for (size_t i = 0; i < plaintext_len + BLOCK_SIZE; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    return 0;
}


#output
Ciphertext: 48646e6f6b240607000000000000
